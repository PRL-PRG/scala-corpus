# -*- mode: makefile -*-

base_dir := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

SHELL := /bin/bash

SBT := sbt -batch -ivy $(IVY_DIR) -sbt-boot $(SBT_BOOT_DIR) -Dsbt.log.noformat=true -Djline.terminal=jline.UnsupportedTerminal

REDO ?= 0

.PHONY: \
	clean \
	clean-classes \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	clean-repo-build-system \
	clean-repo-metadata \
	clean-repo-sloc \
	compile \
	implicits \
	metadata \
	semanticdb \
	repo-build-system \
	repo-metadata \
	repo-sloc \
	reset

$(COMPILE_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx1536M -Xss1M" \
    $(SBT) clean test:compile > $(COMPILE_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(COMPILE_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(COMPILE_STATUS);

$(IMPLICITS_STATUS): $(METADATA_STATUS) $(SEMANTICDB_STATUS)
	echo "exit_code,duration" > $(IMPLICITS_STATUS); \
    if [ $$(Rscript -e 'cat(read.csv("$(METADATA_STATUS)")$$exit_code[1])') -eq '0' \
      -a $$(Rscript -e 'cat(read.csv("$(SEMANTICDB_STATUS)")$$exit_code[1])') -eq '0' ]; then \
        $(AMM) $(SCRIPTS_DIR)/extract-implicits.sc > $(IMPLICITS_LOG) 2>&1; \
        exit_code=$$?; \
        echo "$$exit_code,$$SECONDS" >> $(IMPLICITS_STATUS); \
    else \
      echo "-1,0" >> $(IMPLICITS_STATUS); \
    fi

$(METADATA_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
    # we cannot tee the output since we want to keep the error code
	$(SBT) metadata > $(METADATA_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(METADATA_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(METADATA_STATUS);

# runs the semanticdb task on a clean project
$(SEMANTICDB_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx4G -Xss1M" \
    $(SBT) semanticdb >$(SEMANTICDB_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(SEMANTICDB_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(SEMANTICDB_STATUS); \
    if [ $$exit_code -eq 0 ]; then \
      $(AMM) $(SCRIPTS_DIR)/merge-semanticdbs.sc; \
    fi

$(REPO_BUILD_SYSTEM):
	build_system=$$($(SCRIPTS_DIR)/guess-build-system.R .); \
    echo "build_system" > $(REPO_BUILD_SYSTEM); \
    echo "$$build_system" >> $(REPO_BUILD_SYSTEM)

$(REPO_METADATA):
	commit_count=$$(git rev-list --count HEAD); \
    commit=$$(git log --pretty=format:'%H' -n 1); \
    commit_date=$$(git log --date=unix --pretty=format:'%cd' -n 1); \
    first_commit_date=$$(git log --reverse --date=unix --pretty=format:'%cd' | sed -n 1p); \
    size=$$(du -sb . | awk '{print $$1}'); \
    echo "commit_count,commit,first_commit_date,commit_date,size" > $(REPO_METADATA); \
    echo "$$commit_count,$$commit,$$first_commit_date,$$commit_date,$$size" >> $(REPO_METADATA)

$(REPO_SLOC):
	echo "files,language,blank,comment,code" > $(REPO_SLOC)
	cloc -q --csv . | tail +3 >> $(REPO_SLOC)

# removes the artifacts created by running tasks from this Makefile
clean:
	rm -fr $(ANALYSIS_DIR)

# removes classes under target (only works for regular sbt projects)
clean-classes:
	find . -type d -name "target" | parallel find "{1}" -type f -name "\*.class" -delete

clean-compile:
	rm -f $(COMPILE_STATUS) $(COMPILE_LOG)

clean-implicits:
	rm -f $(IMPLICITS_STATUS) \
      $(IMPLICITS_LOG) \
      $(IMPLICITS_EXCEPTIONS) \
      $(IMPLICITS)

clean-metadata:
	rm -f $(METADATA_STATUS) \
      $(METADATA_LOG) \
      $(ANALYSIS_DIR)/metadata-*

clean-repo-build-system:
	rm -f $(REPO_BUILD_SYSTEM)

clean-repo-metadata:
	rm -f $(REPO_METADATA)

clean-repo-sloc:
	rm -f $(REPO_SLOC)

# removes whatever sbt was configured to remove
clean-sbt:
	$(SBT) clean

clean-semanticdb:
	rm -f $(SEMANTICDB_STATUS) \
      $(SEMANTICDB_LOG) \
      $(MERGED_SEMANTICDB_FILE) \
      $(MERGED_SEMANTICDB_STATS_FILE)

compile:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(COMPILE_STATUS)' 0) -ne '0' ] && \
    rm $(COMPILE_STATUS)
endif
	$(MAKE) -f $(this_makefile) $(COMPILE_STATUS)

implicits:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 0) -ne '0' ] && \
    [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
    [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
    rm $(IMPLICITS_STATUS)
endif
	$(MAKE) -f $(this_makefile) $(IMPLICITS_STATUS)

metadata:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -ne '0' ] && \
    rm $(METADATA_STATUS)
endif
	$(MAKE) -f $(this_makefile) $(METADATA_STATUS)

repo-build-system: $(REPO_BUILD_SYSTEM)

repo-metadata: $(REPO_METADATA)

repo-sloc: $(REPO_SLOC)

# removes all that was not original part of the repository
reset:
	git clean -fdx

semanticdb:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 0) -ne '0' ] && \
    [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
    rm $(SEMANTICDB_STATUS)
endif
	$(MAKE) -f $(this_makefile) $(SEMANTICDB_STATUS)

