# -*- mode: makefile -*-

base_dir := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

# recompute the paths to get relative one instead of the absolute
REL_GLOBAL_IVY_DIR := $(shell Rscript -e 'fs::path_rel("$(GLOBAL_IVY_DIR)", fs::path(getwd(), "$(IVY_DIR)"))')
REL_GLOBAL_COURSIER_DIR := $(shell Rscript -e 'fs::path_rel("$(GLOBAL_COURSIER_DIR)", getwd())')

# we have to use bash since we rely on $SECONDS implicit variable
SHELL := /bin/bash

define SBT_BASE
COURSIER_CACHE=$(COURSIER_DIR) \
  sbt \
    -ivy $(IVY_DIR) \
    -sbt-dir $(SBT_DIR) \
    -sbt-boot $(SBT_BOOT_DIR) \
    -Dsbt.log.noformat=true \
    -Djline.terminal=jline.UnsupportedTerminal
endef

SBT := $(SBT_BASE) -batch

REDO ?= 0

.PHONY: \
  all \
  bootstrap \
	clean \
	clean-bootstrap \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	clean-repo-metadata \
	compile \
	implicits \
	metadata \
	repo-metadata \
	reset \
	reset-all \
	sbt \
	semanticdb

all: repo-metadata compile implicits

define BOOTSTRAP
	[ -d "$(ANALYSIS_DIR)" ] || mkdir -p $(ANALYSIS_DIR)

	if [ ! -d "$(IVY_DIR)" ]; then \
      mkdir -p $(IVY_DIR); \
      ln -sf $(REL_GLOBAL_IVY_DIR)/cache $(IVY_DIR); \
      ln -sf $(REL_GLOBAL_IVY_DIR)/local $(IVY_DIR); \
    fi

	[ -d project ] || mkdir project
	echo 'addSbtPlugin("cz.cvut.fit.prl.scala.implicits" % "sbt-plugins" % "1.0-SNAPSHOT")' > project/_sbt-implicits-plugins_.sbt

	[ -d "$(SBT_DIR)" ] || mkdir -p $(SBT_DIR)

	if [ ! -d "$(SBT_BOOT_DIR)" ]; then \
      mkdir -p $(SBT_BOOT_DIR); \
      ls -1 $(GLOBAL_SBT_BOOT_DIR) | \
        grep "^scala-" | \
        $(parallel_base) ln -sf "$$(Rscript -e 'fs::path_rel("$(GLOBAL_SBT_BOOT_DIR)/{1}", fs::path(getwd(), "$(SBT_BOOT_DIR)"))')" "$(SBT_BOOT_DIR)"; \
    fi

	[ -L "$(COURSIER_DIR)" ] || ln -s $(REL_GLOBAL_COURSIER_DIR)/v1 $(COURSIER_DIR)

	[ -f "$(SBT_REPOSITORIES_FILE)" ] && ln -s $(SBT_REPOSITORIES_FILE) $(SBT_DIR)/repositories || /bin/true
endef

$(COMPILE_STATUS):
	echo "exit_code,duration,classes" > $(COMPILE_STATUS)
	echo "130,0,0" >> $(COMPILE_STATUS)

	@$(BOOTSTRAP)

	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx8G -Xss1M" \
    $(SBT) clean compileWithStats > $(COMPILE_LOG) 2>&1; \
    exit_code=$$?; \
    classes=$$(find . -name "*.class" | wc -l); \
    echo "exit_code,duration,classes" > $(COMPILE_STATUS); \
    echo "$$exit_code,$$SECONDS,$$classes" >> $(COMPILE_STATUS); \

$(IMPLICITS_STATUS): $(METADATA_STATUS) $(SEMANTICDB_STATUS) $(SEMANTICDB_MERGED_FILE)
	echo "exit_code,duration" > $(IMPLICITS_STATUS); \
	if [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 1) -eq '0' -a \
         $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 1) -eq '0' ]; then \
        $(AMM) $(SCRIPTS_DIR)/extract-implicits.sc > $(IMPLICITS_LOG) 2>&1; \
        exit_code=$$?; \
        echo "$$exit_code,$$SECONDS" >> $(IMPLICITS_STATUS); \
    else \
      echo "-1,0" >> $(IMPLICITS_STATUS); \
    fi

$(METADATA_STATUS):
	@$(BOOTSTRAP)

	echo "exit_code,duration" > $(METADATA_STATUS)
	echo "130,0" >> $(METADATA_STATUS)

    # we cannot tee the output since we want to keep the error code
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx8G -Xss1M" \
    $(SBT) metadata > $(METADATA_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(METADATA_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(METADATA_STATUS);

# runs the semanticdb task on a clean project
$(SEMANTICDB_STATUS):
	@$(BOOTSTRAP)

	echo "exit_code,duration,classes" > $(SEMANTICDB_STATUS)
	echo "130,0,0" >> $(SEMANTICDB_STATUS)

	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx8G -Xss1M" \
    $(SBT) clean semanticdb >$(SEMANTICDB_LOG) 2>&1; \
    exit_code=$$?; \
    classes=$$(find . -name "*.class" | wc -l); \
    echo "exit_code,duration,classes" > $(SEMANTICDB_STATUS); \
    echo "$$exit_code,$$SECONDS,$$classes" >> $(SEMANTICDB_STATUS)

$(SEMANTICDB_MERGED_FILE): $(SEMANTICDB_STATUS)
	if [ $$(Rscript -e 'cat(read.csv("$(SEMANTICDB_STATUS)")$$exit_code[1])') -eq '0' ]; then \
      $(AMM) $(SCRIPTS_DIR)/merge-semanticdbs.sc; \
    fi

$(REPO_METADATA):
	@$(BOOTSTRAP)
	$(SCRIPTS_DIR)/repo-metadata.R . $(REPO_METADATA) $(REPO_SLOC)

bootstrap:
	$(BOOTSTRAP)

# removes the artifacts created by running tasks from this Makefile
clean: clean-bootstrap
	rm -fr $(ANALYSIS_DIR)

clean-bootstrap:
	rm -fr $(IVY_DIR)
	rm -fr $(COURSIER_DIR)
	rm -fr $(SBT_BOOT_DIR)
	rm -fr $(SBT_DIR)

clean-compile:
	rm -f $(COMPILE_STATUS) $(COMPILE_LOG)

clean-implicits:
	rm -f $(IMPLICITS_STATUS) \
      $(IMPLICITS_LOG) \
      $(IMPLICITS_EXCEPTIONS) \
      $(IMPLICITS)

clean-metadata:
	rm -f $(METADATA_STATUS) \
      $(METADATA_LOG) \
      $(ANALYSIS_DIR)/metadata-*

clean-repo-metadata:
	rm -f $(REPO_METADATA)
	rm -f $(REPO_SLOC)

# removes whatever sbt was configured to remove
clean-sbt:
	$(SBT) clean

clean-semanticdb:
	rm -f $(SEMANTICDB_STATUS) \
      $(SEMANTICDB_LOG) \
      $(SEMANTICDB_MERGED_FILE) \
      $(SEMANTICDB_MERGED_STATS_FILE)

compile:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(COMPILE_STATUS)' 0) -ne '0' ] && \
      $(MAKE) -f $(this_makefile) clean-compile || \
      echo "No need to redo"
endif
ifeq ($(REDO), 2)
	$(MAKE) -f $(this_makefile) clean-compile
endif
ifeq ($(REDO), 3)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(COMPILE_STATUS)' 1) -eq '0' ] && \
    $(MAKE) -f $(this_makefile) clean-compile
endif

	$(MAKE) -f $(this_makefile) $(COMPILE_STATUS)

implicits:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(IMPLICITS_STATUS)' 0) -ne '0' ] && \
	  [ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 1) -eq '0' ] && \
      [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 1) -eq '0' ] && \
      $(MAKE) -f $(this_makefile) clean-implicits || \
      echo "No need to redo"
endif
ifeq ($(REDO), 2)
	$(MAKE) -f $(this_makefile) clean-implicits
endif
ifeq ($(REDO), 3)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(IMPLICITS_STATUS)' 1) -eq '0' ] && \
      $(MAKE) -f $(this_makefile) clean-implicits
endif

	$(MAKE) -f $(this_makefile) $(IMPLICITS_STATUS)

metadata:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -ne '0' ] && \
      $(MAKE) -f $(this_makefile) clean-metadata || \
      echo "No need to redo"
endif
ifeq ($(REDO), 2)
	$(MAKE) -f $(this_makefile) clean-metadata
endif
ifeq ($(REDO), 3)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 1) -eq '0' ] && \
      $(MAKE) -f $(this_makefile) clean-metadata
endif

	$(MAKE) -f $(this_makefile) $(METADATA_STATUS)

repo-metadata:
ifeq ($(REDO), 2)
	$(MAKE) -f $(this_makefile) clean-repo-metadata
endif
	$(MAKE) -f $(this_makefile) $(REPO_METADATA)

reset:
	git clean -fdX

reset-all:
	git clean -fdx

sbt:
	@$(BOOTSTRAP)
	$(SBT_BASE)

semanticdb:
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 0) -ne '0' ] && \
      [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
      $(MAKE) -f $(this_makefile) clean-semanticdb || \
      echo "No need to redo"
endif
ifeq ($(REDO), 2)
	$(MAKE) -f $(this_makefile) clean-semanticdb
endif
ifeq ($(REDO), 3)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 1) -eq '0' ] && \
      $(MAKE) -f $(this_makefile) clean-semanticdb
endif

	$(MAKE) -f $(this_makefile) $(SEMANTICDB_STATUS) $(SEMANTICDB_MERGED_FILE)
