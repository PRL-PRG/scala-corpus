# -*- mode: makefile -*-

base_dir := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

SHELL := /bin/bash

SBT := sbt -batch -ivy $(IVY_DIR) -sbt-boot $(SBT_BOOT_DIR) -Dsbt.log.noformat=true -Djline.terminal=jline.UnsupportedTerminal

.PHONY: \
	clean \
	clean-classes \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	compile \
	implicits \
	metadata \
	semanticdb \
	repo-metadata \
	reset

$(COMPILE_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx1536M -Xss1M" \
    $(SBT) clean test:compile > $(COMPILE_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(COMPILE_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(COMPILE_STATUS);

$(IMPLICITS_STATUS): $(METADATA_STATUS) $(SEMANTICDB_STATUS)
	echo "exit_code,duration" > $(IMPLICITS_STATUS); \
    if [ $$(Rscript -e 'cat(read.csv("$(SEMANTICDB_STATUS)")$$exit_code[1])') -eq '0' ]; then \
      $(AMM) $(SCRIPTS_DIR)/extract-implicits.sc > $(IMPLICITS_LOG) 2>&1; \
      exit_code=$$?; \
      echo "$$exit_code,$$SECONDS" >> $(IMPLICITS_STATUS); \
    else \
      echo "-1,0" >> $(IMPLICITS_STATUS); \
    fi

$(METADATA_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
    # we cannot tee the output since we want to keep the error code
	$(SBT) metadata > $(METADATA_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(METADATA_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(METADATA_STATUS);

# runs the semanticdb task on a clean project
$(SEMANTICDB_STATUS): $(IVY_DIR) $(SBT_BOOT_DIR)
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx4G -Xss1M" \
    $(SBT) semanticdb >$(SEMANTICDB_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(SEMANTICDB_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(SEMANTICDB_STATUS); \
    if [ $$exit_code -eq 0 ]; then \
      $(AMM) $(SCRIPTS_DIR)/merge-semanticdbs.sc; \
    fi

# removes the artifacts created by running tasks from this Makefile
clean:
	rm -fr $(ANALYSIS_DIR)

# removes classes under target (only works for regular sbt projects)
clean-classes:
	find . -type d -name "target" | parallel find "{1}" -type f -name "\*.class" -delete

clean-compile:
	rm -f $(COMPILE_STATUS) $(COMPILE_LOG)

clean-implicits:
	rm -f $(IMPLICITS_STATUS) \
      $(IMPLICITS_LOG) \
      $(IMPLICITS_EXCEPTIONS) \
      $(IMPLICITS)

clean-metadata:
	rm -f $(METADATA_STATUS) $(METADATA_LOG)

# removes whatever sbt was configured to remove
clean-sbt:
	$(SBT) clean

clean-semanticdb:
	rm -f $(SEMANTICDB_STATUS) $(SEMANTICDB_LOG)
	rm -f $(MERGED_SEMANTICDB_FILE)
	rm -f $(MERGED_SEMANTICDB_STATS_FILE)

compile: $(COMPILE_STATUS)

implicits: $(IMPLICITS_STATUS)

metadata: $(METADATA_STATUS)

merge-semanticdbs: $(MERGED_SEMANTICDB_FILE)

redo-failed-compile:
	if [ $$(Rscript -e 'cat(read.csv("$(COMPILE_STATUS)")$$exit_code[1])') -ne '0' ]; then \
      echo "Redoing"; \
      $(MAKE) -f $(this_makefile) clean-compile compile; \
    fi

redo-failed-metadata:
	if [ $$(Rscript -e 'cat(read.csv("$(METADATA_STATUS)")$$exit_code[1])') -ne '0' ]; then \
      echo "Redoing"; \
      $(MAKE) -f $(this_makefile) clean-metadata metadata; \
    fi

redo-failed-semanticdb:
	if [ $$(Rscript -e 'cat(read.csv("$(SEMANTICDB_STATUS)")$$exit_code[1])') -ne '0' ]; then \
      echo "Redoing"; \
      $(MAKE) -f $(this_makefile) clean-semanticdb semanticdb; \
    fi

repo-metadata:
	$(base_dir)/scripts/generate-repo-metadata.sh .
	$(base_dir)/scripts/generate-sloc.sh .

# removes all that was not original part of the repository
reset:
	git clean -fdx

semanticdb: $(SEMANTICDB_STATUS)
