# -*- mode: makefile -*-

base_dir := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

SHELL := /bin/bash

define SBT_BASE
COURSIER_CACHE=$(COURSIER_DIR) \
  sbt \
    -Dsbt.override.build.repos=true \
    -ivy $(IVY_DIR) \
    -sbt-boot $(SBT_BOOT_DIR) \
    -Dsbt.log.noformat=true \
    -Djline.terminal=jline.UnsupportedTerminal
endef

SBT := $(SBT_BASE) -batch

REDO ?= 0

.PHONY: \
    all \
	clean \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	clean-repo-build-system \
	clean-repo-metadata \
	clean-repo-sloc \
	compile \
	implicits \
	metadata \
	repo-build-system \
	repo-metadata \
	repo-sloc \
	reset \
	reset-all \
	sbt \
	semanticdb

all: repo-build-system repo-metadata repo-sloc compile implicits

define BOOTSTRAP
	[ -d $(ANALYSIS_DIR) ] || mkdir -p $(ANALYSIS_DIR)

	if [ ! -d $(IVY_DIR) ]; then \
      mkdir -p $(IVY_DIR); \
      ln -sf $(GLOBAL_IVY_DIR)/cache $(IVY_DIR); \
      ln -sf $(GLOBAL_IVY_DIR)/local $(IVY_DIR); \
    fi

	if [ ! -d $(SBT_BOOT_DIR) ]; then \
      mkdir -p $(SBT_BOOT_DIR); \
      ls -1 $(GLOBAL_SBT_BOOT_DIR) | \
        grep "^scala-" | \
        parallel ln -sf "$(GLOBAL_SBT_BOOT_DIR)/{1}" "$(SBT_BOOT_DIR)/${1}"; \
    fi

	[ -d $(COURSIER_DIR) ] || ln -s $(GLOBAL_COURSIER_DIR)/v1 $(COURSIER_DIR)
endef

$(COMPILE_STATUS):
	$(BOOTSTRAP)
	if [ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 1) -eq '0' ]; then \
      cp $(SEMANTICDB_STATUS) $(COMPILE_STATUS); \
	else \
      JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx2G -Xss1M" \
      $(SBT) clean compile test:compile > $(COMPILE_LOG) 2>&1; \
      exit_code=$$?; \
      classes=$(find . -name "*.class" | wc -l); \
      echo "exit_code,duration,classes" > $(COMPILE_STATUS); \
      echo "$$exit_code,$$SECONDS,$$classes" >> $(COMPILE_STATUS); \
    fi

$(IMPLICITS_STATUS): $(METADATA_STATUS) $(SEMANTICDB_STATUS) $(SEMANTICDB_MERGED_FILE)
	echo "exit_code,duration" > $(IMPLICITS_STATUS); \
	if [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 1) -eq '0' -a \
         $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 1) -eq '0' ]; then \
        $(AMM) $(SCRIPTS_DIR)/extract-implicits.sc > $(IMPLICITS_LOG) 2>&1; \
        exit_code=$$?; \
        echo "$$exit_code,$$SECONDS" >> $(IMPLICITS_STATUS); \
    else \
      echo "-1,0" >> $(IMPLICITS_STATUS); \
    fi

$(METADATA_STATUS):
	$(BOOTSTRAP)
    # we cannot tee the output since we want to keep the error code
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx4G -Xss1M" \
	$(SBT) metadata > $(METADATA_LOG) 2>&1; \
    exit_code=$$?; \
    echo "exit_code,duration" > $(METADATA_STATUS); \
    echo "$$exit_code,$$SECONDS" >> $(METADATA_STATUS);

# runs the semanticdb task on a clean project
$(SEMANTICDB_STATUS):
	$(BOOTSTRAP)
	JAVA_OPTS="-XX:MaxMetaspaceSize=2G -Xms512M -Xmx4G -Xss1M" \
    $(SBT) clean semanticdb >$(SEMANTICDB_LOG) 2>&1; \
    exit_code=$$?; \
    classes=$(find . -name "*.class" | wc -l); \
    echo "exit_code,duration,classes" > $(SEMANTICDB_STATUS); \
    echo "$$exit_code,$$SECONDS,$$classes" >> $(SEMANTICDB_STATUS)

$(SEMANTICDB_MERGED_FILE): $(SEMANTICDB_STATUS)
	if [ $$(Rscript -e 'cat(read.csv("$(SEMANTICDB_STATUS)")$$exit_code[1])') -eq '0' ]; then \
      $(AMM) $(SCRIPTS_DIR)/merge-semanticdbs.sc; \
    fi

$(REPO_BUILD_SYSTEM):
	$(BOOTSTRAP)
	$(SCRIPTS_DIR)/guess-build-system.R . $(REPO_BUILD_SYSTEM)

$(REPO_METADATA):
	$(BOOTSTRAP)
	commit_count=$$(git rev-list --count HEAD); \
    commit=$$(git log --pretty=format:'%H' -n 1); \
    commit_date=$$(git log --date=unix --pretty=format:'%cd' -n 1); \
    first_commit_date=$$(git log --reverse --date=unix --pretty=format:'%cd' | sed -n 1p); \
    size=$$(du -sb . | awk '{print $$1}'); \
    echo "commit_count,commit,first_commit_date,commit_date,size" > $(REPO_METADATA); \
    echo "$$commit_count,$$commit,$$first_commit_date,$$commit_date,$$size" >> $(REPO_METADATA)

$(REPO_SLOC):
	$(BOOTSTRAP)
	echo "files,language,blank,comment,code" > $(REPO_SLOC)
	cloc --vcs=git -q --csv . | tail +3 >> $(REPO_SLOC)

# removes the artifacts created by running tasks from this Makefile
clean:
	rm -fr $(ANALYSIS_DIR)

clean-compile:
	rm -f $(COMPILE_STATUS) $(COMPILE_LOG)

clean-implicits:
	rm -f $(IMPLICITS_STATUS) \
      $(IMPLICITS_LOG) \
      $(IMPLICITS_EXCEPTIONS) \
      $(IMPLICITS)

clean-metadata:
	rm -f $(METADATA_STATUS) \
      $(METADATA_LOG) \
      $(ANALYSIS_DIR)/metadata-*

clean-repo-build-system:
	rm -f $(REPO_BUILD_SYSTEM)

clean-repo-metadata:
	rm -f $(REPO_METADATA)

clean-repo-sloc:
	rm -f $(REPO_SLOC)

# removes whatever sbt was configured to remove
clean-sbt:
	$(SBT) clean

clean-semanticdb:
	rm -f $(SEMANTICDB_STATUS) \
      $(SEMANTICDB_LOG) \
      $(SEMANTICDB_MERGED_FILE) \
      $(SEMANTICDB_MERGED_STATS_FILE)

compile:
ifeq ($(REDO), 2)
	rm $(COMPILE_STATUS)
endif
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(COMPILE_STATUS)' 0) -ne '0' ] && \
    rm $(COMPILE_STATUS) || echo "No need to redo"
endif
	$(MAKE) -f $(this_makefile) $(COMPILE_STATUS)

implicits:
ifeq ($(REDO), 2)
	rm $(IMPLICITS_STATUS)
endif
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 0) -ne '0' ] && \
    [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
    rm $(IMPLICITS_STATUS) || echo "No need to redo"
endif
	$(MAKE) -f $(this_makefile) $(IMPLICITS_STATUS)

metadata:
ifeq ($(REDO), 2)
	rm $(METADATA_STATUS)
endif
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -ne '0' ] && \
    rm $(METADATA_STATUS) || echo "No need to redo"
endif
	$(MAKE) -f $(this_makefile) $(METADATA_STATUS)

repo-build-system: $(REPO_BUILD_SYSTEM)

repo-metadata: $(REPO_METADATA)

repo-sloc: $(REPO_SLOC)

reset:
	git clean -fdX

reset-all:
	git clean -fdx

sbt:
	$(BOOTSTRAP)
	$(SBT_BASE)

semanticdb:
ifeq ($(REDO), 2)
	rm $(SEMANTICDB_STATUS)
endif
ifeq ($(REDO), 1)
	[ $$($(SCRIPTS_DIR)/get-task-status.R '$(SEMANTICDB_STATUS)' 0) -ne '0' ] && \
    [ $$($(SCRIPTS_DIR)/get-task-status.R '$(METADATA_STATUS)' 0) -eq '0' ] && \
    rm $(SEMANTICDB_STATUS) || echo "No need to redo"
endif
	$(MAKE) -f $(this_makefile) $(SEMANTICDB_STATUS) $(SEMANTICDB_MERGED_FILE)

