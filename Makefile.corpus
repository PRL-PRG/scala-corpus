# -*- mode: makefile -*-

# the location of this makefile
base_dir := $(dir $(abspath $(shell readlink $(lastword $(MAKEFILE_LIST)))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

PROJECTS_DIR := projects
LOG_DIR_BASE := logs
TIMESTAMP := $(shell LC_LOCALE=C date)
LOG_DIR_LATEST := $(LOG_DIR_BASE)/latest
CORPUS := $(shell basename $$(pwd))

# it cannot be simply be ?= because that one is not immediate, but deferred so
# it will be evaluated multiple times
ifeq ($(origin LOG_DIR), undefined)
    ifeq ($(origin LOG_DIR_BASE), undefined)
		LOG_DIR := $(LOG_DIR_BASE)/1
	else
		LOG_DIR := $(LOG_DIR_BASE)/$(shell ls -1 $(LOG_DIR_BASE) | awk 'BEGIN {max = 0} /[0-9][0-9]*/ {if ($$1 > max) max=$$1} END {print max+1}' )
	endif
endif

# contains the list of projects used in the corpus
PROJECTS_FILE := projects.txt
PROJECTS_CSV_FILE := projects.csv
# a file controlling the number of parallel tasks it can be updated while the
# task is run, but gets reset before a task is run
JOBS_FILE := jobsfile.txt

# --------------------------------------------------------------------------------

# parallel exit code is based on how many jobs has failed there will for sure be
# some so we just say keep going this will run make on each package with tasks
# given in as parameters
define parallel =
@echo $(N_JOBS) > jobsfile.txt
@echo ">> Running parallel with logs in $(LOG_DIR) using $(PROJECTS_FILE)..."
cp $(PROJECTS_FILE) $(LOG_DIR)/projects.txt
touch "$(LOG_DIR)/$@"
-parallel \
  --jobs $(JOBS_FILE) \
  -a "$(PROJECTS_FILE)" \
  --files \
  --bar \
  --tagstring "$@ - {}:" \
  --result "$(PROJECTS_DIR)/{1}/$(ANALYSIS_DIR)/parallel/{2}" \
  --joblog "$(LOG_DIR)/$@-parallel.log" \
  --timeout $(TIMEOUT) \
  --shuf \
  make $(MFLAGS) -C "$(PROJECTS_DIR)/{1}" -f $(base_dir)/Makefile.project "{2}" \
  :::
endef

# there is no direct rule how to create PROJECTS_DIR this has to be done manually
# using either download-projects or link-ghtorrent-projects tasks
bootstrap := $(LOG_DIR) $(PROJECTS_DIR)

.PHONY: \
  all \
	clean \
	clean-classes \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	clean-classes \
	compile \
	download-projects \
	implicits \
	fetch-github-info \
	merge-compile-results \
	merge-metadata-results \
	merge-semanticdb-results \
	merge-implicits-results \
	metadata \
	link-projects \
	redo-failed-compile \
	redo-failed-metadata \
	redo-failed-semanticdb \
	redo-failed-implicits \
	report \
	reset \
	semanticdb \
	sync-from-prl4 \
	tail-log

$(LOG_DIR):
	@mkdir -p $(LOG_DIR)
	@echo "$(TIMESTAMP)" > $(LOG_DIR)/timestamp
	@rm -f $(LOG_DIR_LATEST)
	@ln -s $(notdir $(LOG_DIR)) $(LOG_DIR_LATEST)

$(PROJECTS_GITHUB_INFO):
	$(SCRIPTS_DIR)/fetch-github-info.R $(PROJECTS_FILE) $(PROJECTS_GITHUB_INFO)

all:
	$(MAKE) -f $(this_makefile) metadata
	for i in $$(seq $(MAX_REPEAT)); do $(MAKE) -f $(this_makefile) redo-failed-metadata; done
	$(MAKE) -f $(this_makefile) compile
	for i in $$(seq $(MAX_REPEAT)); do $(MAKE) -f $(this_makefile) redo-failed-compile; done
	$(MAKE) -f $(this_makefile) semanticdb
	for i in $$(seq $(MAX_REPEAT)); do $(MAKE) -f $(this_makefile) redo-failed-semanticdb; done
	$(MAKE) -f $(this_makefile) implicits

clean: $(bootstrap)
	$(parallel) $@
	-rm -f $(GLOBAL_IMPLICITS)
	-rm -fr $(LOG_DIR_BASE)
	-rm -f $(notdir $(METADATA_STATUS))
	-rm -f $(notdir $(COMPILE_STATUS))
	-rm -f $(notdir $(SEMANTICDB_STATUS))
	-rm -f $(notdir $(MERGED_SEMANTICDB_STATS_FILE))
	-rm -f $(notdir $(IMPLICITS_STATUS))
	-rm -f $(notdir $(IMPLICITS_STATS))
	-rm -f $(notdir $(IMPLICITS_EXCEPTIONS))
	-rm -f $(PROJECTS_GITHUB_DATA)

clean-classes: $(bootstrap)
	$(parallel) $@

clean-compile: $(bootstrap)
	$(parallel) $@

clean-implicits: $(bootstrap)
	$(parallel) $@

clean-metadata: $(bootstrap)
	$(parallel) $@

clean-sbt: $(bootstrap)
	$(parallel) $@

clean-semanticdb: $(bootstrap)
	$(parallel) $@

compile: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-compile-results

download-projects: $(PROJECTS_FILE)
	-mkdir -p $(PROJECTS_DIR)
	cat $(PROJECTS_FILE) | sed 's|\(.*\)--\(.*\)|\1,\2|g' | \
        parallel -C, --bar -j4 git clone "https://github.com/{1}/{2}" $(PROJECTS_DIR)/"{1}--{2}"

implicits: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-implicits-results

link-projects: $(PROJECTS_CSV_FILE)
	-mkdir -p $(PROJECTS_DIR)
	cat $(PROJECTS_CSV_FILE) | \
      csvcut -c path,project_id | \
      csvformat -K 1 | \
      parallel -j1 --bar --colsep "," "ln -s {1} $(PROJECTS_DIR)/{2}"
	cat $(PROJECTS_CSV_FILE) | csvcut -c project_id | csvformat -K 1 > $(PROJECTS_FILE)

fetch-github-info: $(PROJECTS_GITHUB_INFO)

merge-compile-results:
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(COMPILE_STATUS) "ii" $(notdir $(COMPILE_STATUS))

merge-implicits-results:
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(IMPLICITS_STATUS) "ii" $(notdir $(IMPLICITS_STATUS))
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(IMPLICITS_STATS) "cciiiii" $(notdir $(IMPLICITS_STATS))
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(IMPLICITS_EXCEPTIONS) "ccccc" $(notdir $(IMPLICITS_EXCEPTIONS))
	$(AMM) $(SCRIPTS_DIR)/merge-implicits.sc

merge-metadata-results:
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(METADATA_STATUS) "ii" $(notdir $(METADATA_STATUS))
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) "_analysis_/metadata-versions.csv" "cccccccccccc" "metadata-versions.csv"
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) "_analysis_/metadata-sourcepaths.csv" "ccclciciii" "metadata-sourcepaths.csv"

merge-semanticdb-results:
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(SEMANTICDB_STATUS) "ii" $(notdir $(SEMANTICDB_STATUS))
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(MERGED_SEMANTICDB_STATS_FILE) "iii" $(notdir $(MERGED_SEMANTICDB_STATS_FILE))

metadata: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-metadata-results

redo-failed-compile: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-compile-results

redo-failed-implicits: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-implicits-results

redo-failed-metadata: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-metadata-results

redo-failed-semanticdb: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-semanticdb-results

report:
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/report.Rmd", output_file=file.path("$(CURDIR)/report.html"), knit_root_dir="$(CURDIR)", params=list(base_dir="$(base_dir)", current_dir="$(CURDIR)"))'
	@echo ">> Report is in report.html"

reset: $(bootstrap)
	$(parallel) $@

semanticdb: $(bootstrap)
	$(parallel) $@
	$(MAKE) -f $(this_makefile) merge-semanticdb-results

tail-log: $(LOG_DIR_LATEST)
	tail -f $(LOG_DIR_LATEST)/parallel.log

sync-from-prl4:
	rsync \
      -avhm \
      --progress \
      --exclude='Makefile' \
      --exclude='jobsfile.txt' \
      --exclude='.ivy' \
      --exclude='.sbt-boot' \
      prl4:Research/Projects/scala-corpus/corpora/$(CORPUS)/ \
      ./
