# -*- mode: makefile -*-

# the location of this makefile
base_dir := $(dir $(abspath $(shell readlink $(lastword $(MAKEFILE_LIST)))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

LOG_DIR_BASE := logs
TIMESTAMP := $(shell LC_LOCALE=C date)
LOG_DIR_LATEST := $(LOG_DIR_BASE)/latest
CORPUS := $(shell basename $$(pwd))

ifeq ($(origin LOG_DIR_BASE), undefined)
	LOG_DIR := $(LOG_DIR_BASE)/1
else
	LOG_DIR := $(LOG_DIR_BASE)/$(shell ls -1 $(LOG_DIR_BASE) | awk 'BEGIN {max = 0} /[0-9][0-9]*/ {if ($$1 > max) max=$$1} END {print max+1}' )
endif


# a file controlling the number of parallel tasks it can be updated while the
# task is run, but gets reset before a task is run
JOBS_FILE := jobsfile.txt

REDO ?= 0

# --------------------------------------------------------------------------------

parallel := $(MAKE) -f $(this_makefile) parallel

bootstrap :=

.PHONY: \
  all \
	clean \
	clean-compile \
	clean-dejavu \
	clean-implicits \
	clean-metadata \
	clean-projects \
	clean-repo-build-system \
	clean-repo-metadata \
	clean-repo-sloc \
	clean-sbt \
	clean-sbt-projects \
	clean-semanticdb \
	clean-so-projects \
	clean-classes \
	compile \
	corpus-summary \
	dejavu \
	download-projects \
	export-implicits \
	implicits \
	fetch-github-info \
	filter-sbt-projects \
	filter-so-projects \
	filter-duplicate-projects \
	merge-compile-results \
	merge-semanticdb-results \
	merge-implicits-results \
	metadata \
	parallel \
	patch-downloaded-projects \
	redo-good-compile \
	redo-good-implicits \
	redo-good-metadata \
	redo-good-semanticdb \
	redo-failed-compile \
	redo-failed-implicits \
	redo-failed-metadata \
	redo-failed-semanticdb \
	redo-compile \
	redo-implicits \
	redo-metadata \
	redo-semanticdb \
	repo-build-system \
	repo-metadata \
	repo-sloc \
	report \
	reset \
	reset-all \
	sbt-structure \
	scaladex \
	semanticdb

$(LOG_DIR):
	@mkdir -p $(LOG_DIR)
	@echo "$(TIMESTAMP)" > $(LOG_DIR)/timestamp
	@rm -f $(LOG_DIR_LATEST)
	@ln -s $(notdir $(LOG_DIR)) $(LOG_DIR_LATEST)

$(PROJECTS_GITHUB_INFO): $(SBT_PROJECTS_FILE)
	if [ -f $(PROJECTS_GITHUB_INFO).pinned ]; then \
      cp -f $(PROJECTS_GITHUB_INFO).pinned $(PROJECTS_GITHUB_INFO); \
    else \
      $(SCRIPTS_DIR)/fetch-github-info.R $(SBT_PROJECTS_FILE) $(PROJECTS_GITHUB_INFO); \
      cp $(PROJECTS_GITHUB_INFO) $(PROJECTS_GITHUB_INFO).pinned; \
    fi

$(GLOBAL_REPO_BUILD_SYSTEM): $(ALL_PROJECTS_FILE) $(ALL_PROJECTS_DIR)
	$(parallel) TASK=repo-build-system PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)
	$(SCRIPTS_DIR)/merge-csvs.R $(ALL_PROJECTS_FILE) $(ALL_PROJECTS_DIR) $(REPO_BUILD_SYSTEM) "cc" $(GLOBAL_REPO_BUILD_SYSTEM)

$(GLOBAL_REPO_METADATA): $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR)
	$(parallel) TASK=repo-metadata PROJECTS_FILE=$(SO_PROJECTS_FILE) PROJECTS_DIR=$(SO_PROJECTS_DIR)
	$(SCRIPTS_DIR)/merge-csvs.R $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR) $(REPO_METADATA) "iciin" $(GLOBAL_REPO_METADATA)

$(GLOBAL_REPO_SLOC): $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR)
	$(parallel) TASK=repo-sloc PROJECTS_FILE=$(SO_PROJECTS_FILE) PROJECTS_DIR=$(SO_PROJECTS_DIR)
	$(SCRIPTS_DIR)/merge-csvs.R $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR) $(REPO_SLOC) "iciii" $(GLOBAL_REPO_SLOC)

$(DEJAVU_INPUT): $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR)
	[ -d $(DEJAVU_HOME) ] || mkdir $(DEJAVU_HOME)
	[ -d $(DEJAVU_DOWNLOAD) ] || mkdir $(DEJAVU_DOWNLOAD) && \
	  parallel --bar -a $(SO_PROJECTS_FILE) ln -sf '$$(pwd)/$(SO_PROJECTS_DIR)/{1}' '$$(pwd)/$(DEJAVU_DOWNLOAD)/{#}'

	$(SCRIPTS_DIR)/generate-dejavu-input.R $(SO_PROJECTS_FILE) $(DEJAVU_INPUT)
	sed -i 's/"""/"/g'  $(DEJAVU_INPUT)

dejavu/files.csv: $(DEJAVU_INPUT)
	cd $(DEJAVU_HOME) && \
      $(SCRIPTS_DIR)/tools/js-tokenizer/build/tokenizer Scala $(notdir $(DEJAVU_INPUT)) 1 0 .; \
      echo "Done tokenizing";

	mv $(DEJAVU_HOME)/files_0.csv $(DEJAVU_HOME)/files.csv
	mv $(DEJAVU_HOME)/stats_0.csv $(DEJAVU_HOME)/stats.csv
	mv $(DEJAVU_HOME)/summary_0.txt $(DEJAVU_HOME)/summary.txt
	mv $(DEJAVU_HOME)/projects_0.csv $(DEJAVU_HOME)/projects.csv

dejavu/files.csv.h2i: dejavu/files.csv
	cd $(SCRIPTS_DIR)/tools/sccpreprocessor/src && \
      java SccPreprocessor h2i $(CURDIR)/$(DEJAVU_HOME)

$(DEJAVU_FILES_HASH): dejavu/files.csv.h2i
	$(SCRIPTS_DIR)/merge-dejavu-files-hash.R $(DEJAVU_FILES_HASH)

$(ALL_PROJECTS_DIR): $(ALL_PROJECTS_FILE)
	-mkdir -p $(ALL_PROJECTS_DIR)
	-cat $(ALL_PROJECTS_FILE) | sed 's|\(.*\)--\(.*\)|\1,\2|g' | \
        parallel --timeout 30m -C, --bar -j8 $(SCRIPTS_DIR)/download-project.sh 'https://github.com/{1}/{2}' '$(ALL_PROJECTS_DIR)/{1}--{2}'
	$(MAKE) -f $(this_makefile) patch-downloaded-projects

$(SBT_PROJECTS_FILE): $(GLOBAL_REPO_BUILD_SYSTEM)
	Rscript -e 'writeLines(dplyr::filter(readr::read_csv("$(GLOBAL_REPO_BUILD_SYSTEM)"), startsWith(sbt_version, "0.13") | startsWith(sbt_version, "1."))$$project_id, "$(SBT_PROJECTS_FILE)")'

$(SBT_PROJECTS_DIR): $(SBT_PROJECTS_FILE)
	rm -fr $(SBT_PROJECTS_DIR)
	mkdir -p $(SBT_PROJECTS_DIR)
	parallel --bar -j1 -a $(SBT_PROJECTS_FILE) ln -sf '../$(ALL_PROJECTS_DIR)/{1}' '$(SBT_PROJECTS_DIR)/{1}'

$(SO_PROJECTS_FILE): $(SBT_PROJECTS_FILE) $(PROJECTS_GITHUB_INFO)
	Rscript -e 'writeLines(dplyr::filter(dplyr::group_by(readr::read_csv("$(PROJECTS_GITHUB_INFO)"), name), dplyr::n()==1, is.na(error))$$project_id, "$(SO_PROJECTS_FILE)")'

$(SO_PROJECTS_DIR): $(SO_PROJECTS_FILE)
	rm -fr $(SO_PROJECTS_DIR)
	mkdir -p $(SO_PROJECTS_DIR)
	parallel --bar -j1 -a $(SO_PROJECTS_FILE) ln -sf '../$(ALL_PROJECTS_DIR)/{1}' '$(SO_PROJECTS_DIR)/{1}'

# TODO: filter out duplicate projects
$(PROJECTS_FILE): $(GLOBAL_REPO_METADATA) $(GLOBAL_REPO_SLOC) $(DEJAVU_FILES_HASH)
	cp $(SO_PROJECTS_FILE) $(PROJECTS_FILE)

$(PROJECTS_DIR): $(PROJECTS_FILE)
	mkdir -p $(PROJECTS_DIR)
	parallel --bar -j1 -a $(PROJECTS_FILE) ln -sf '../$(ALL_PROJECTS_DIR)/{1}' '$(PROJECTS_DIR)/{1}'

$(GLOBAL_METADATA_STATUS): $(PROJECTS_FILE) $(PROJECTS_DIR)
ifneq ($(REDO), -1)
	$(parallel) TASK=metadata REDO=$(REDO)
endif
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_STATUS) "ii" $(GLOBAL_METADATA_STATUS)

$(GLOBAL_METADATA_MODULES): $(PROJECTS_FILE) $(PROJECTS_DIR) $(GLOBAL_METADATA_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_MODULES) "cccccccccccc" $(GLOBAL_METADATA_MODULES)

$(GLOBAL_METADATA_SOURCEPATHS): $(PROJECTS_FILE) $(PROJECTS_DIR) $(GLOBAL_METADATA_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_SOURCEPATHS) "ccclciciii" $(GLOBAL_METADATA_SOURCEPATHS)

$(GLOBAL_METADATA_DEPENDENCIES): $(PROJECTS_FILE) $(PROJECTS_DIR) $(GLOBAL_METADATA_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_DEPENDENCIES) "cccccccl" $(GLOBAL_METADATA_DEPENDENCIES)

$(GLOBAL_COMPILE_STATUS): $(PROJECTS_FILE) $(PROJECTS_DIR)
ifneq ($(REDO), -1)
	$(parallel) TASK=compile REDO=$(REDO)
endif
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(COMPILE_STATUS) "iii" $(GLOBAL_COMPILE_STATUS)

$(GLOBAL_SEMANTICDB_STATUS): $(PROJECTS_FILE) $(PROJECTS_DIR)
ifneq ($(REDO), -1)
	$(parallel) TASK=semanticdb REDO=$(REDO)
endif
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(SEMANTICDB_STATUS) "iii" $(GLOBAL_SEMANTICDB_STATUS)

$(GLOBAL_SEMANTICDB_MERGED_STATS_FILE): $(GLOBAL_SEMANTICDB_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(SEMANTICDB_MERGED_STATS_FILE) "iiii" $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)

$(GLOBAL_IMPLICITS_STATUS):
ifneq ($(REDO), -1)
	$(parallel) TASK=implicits REDO=$(REDO)
endif
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_STATUS) "ii" $(GLOBAL_IMPLICITS_STATUS)

$(GLOBAL_IMPLICITS): $(GLOBAL_IMPLICITS_STATUS)
	$(AMM) $(SCRIPTS_DIR)/merge-implicits.sc

$(GLOBAL_IMPLICITS_STATS): $(GLOBAL_IMPLICITS_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_STATS) "cciiiii" $(GLOBAL_IMPLICITS_STATS)

$(GLOBAL_IMPLICITS_EXCEPTIONS):
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_EXCEPTIONS) "ccccc" $(GLOBAL_IMPLICITS_EXCEPTIONS)

$(GLOBAL_SBT_STRUCTURE_STATUS):
ifneq ($(REDO), -1)
	$(parallel) TASK=sbt-structure REDO=$(REDO)
endif
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(SBT_STRUCTURE_STATUS) "ii" $(GLOBAL_SBT_STRUCTURE_STATUS)

$(SCALADEX):
	if [ -f $(SCALADEX).pinned ]; then \
      cp -f $(SCALADEX).pinned $(SCALADEX); \
    else \
      $(SCRIPTS_DIR)/scaladex.R $(SCALADEX).pinned; \
      cp -f $(SCALADEX).pinned $(SCALADEX); \
    fi

all:
	$(MAKE) -f $(this_makefile) sbt-structure
	$(MAKE) -f $(this_makefile) metadata
	$(MAKE) -f $(this_makefile) semanticdb
	$(MAKE) -f $(this_makefile) implicits
	$(MAKE) -f $(this_makefile) compile

clean:
	-$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -fr $(LOG_DIR_BASE) $(JOBSFILE)
	-rm -f $(GLOBAL_REPO_BUILD_SYSTEM)
	-rm -f $(PROJECTS_GITHUB_INFO)
	-rm -f $(GLOBAL_REPO_METADATA)
	-rm -f $(GLOBAL_REPO_SLOC)
	-$(MAKE) -f $(this_makefile) clean-dejavu
	-$(MAKE) -f $(this_makefile) clean-sbt-projects
	-$(MAKE) -f $(this_makefile) clean-so-projects
	-$(MAKE) -f $(this_makefile) clean-projects
	-rm -f $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)
	-rm -f $(GLOBAL_COMPILE_STATUS)
	-rm -f $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)
	-rm -f $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS)
	-rm -f report.html

clean-classes:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-compile:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_COMPILE_STATUS)

clean-dejavu:
	-rm -fr $(DEJAVU_HOME) $(DEJAVU_FILES_HASH)

clean-implicits:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_STATUS)

clean-metadata:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)

clean-projects:
	-rm -fr $(PROJECTS_FILE) $(PROJECTS_DIR)

clean-repo-build-system:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-repo-metadata:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-repo-sloc:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-sbt:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-sbt-projects:
	-rm -fr $(SBT_PROJECTS_FILE) $(SBT_PROJECTS_DIR)

clean-semanticdb:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)

clean-so-projects:
	-rm -fr $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR)

compile: $(GLOBAL_COMPILE_STATUS)

corpus-summary: $(GLOBAL_COMPILE_STATUS) $(GLOBAL_METADATA_STATUS) $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE) $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS) $(GLOBAL_IMPLICITS) $(PROJECTS_GITHUB_INFO) $(GLOBAL_REPO_SLOC) $(GLOBAL_REPO_METADATA) $(SCALADEX)
	$(SCRIPTS_DIR)/corpus-summary.R .

dejavu: $(DEJAVU_FILES_HASH)

download-projects: $(ALL_PROJECTS_DIR)

implicits: $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS)

export-implicits: $(GLOBAL_IMPLICITS)
	$(AMM) $(SCRIPTS_DIR)/export-implicits.sc

fetch-github-info: $(PROJECTS_GITHUB_INFO)

filter-sbt-projects: $(SBT_PROJECTS_FILE) $(SBT_PROJECTS_DIR)

filter-so-projects: $(SO_PROJECTS_FILE) $(SO_PROJECTS_DIR)

filter-duplicate-projects: $(PROJECTS_FILE) $(PROJECTS_DIR)

metadata: $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)

parallel:
	-mkdir -p $(LOG_DIR)
	@echo $(N_JOBS) > jobsfile.txt
	@echo ">> Running parallel task $(TASK) (REDO=$(REDO)) with logs in $(LOG_DIR) using $(PROJECTS_FILE)..."
	cp $(PROJECTS_FILE) $(LOG_DIR)/projects.txt
	touch "$(LOG_DIR)/$(TASK)"
	-parallel \
      --jobs $(JOBS_FILE) \
      -a "$(PROJECTS_FILE)" \
      --files \
      --bar \
      --tagstring "$(TASK) - {}:" \
      --result "$(PROJECTS_DIR)/{1}/$(ANALYSIS_DIR)/parallel/$(TASK)" \
      --joblog "$(LOG_DIR)/$(TASK)-parallel.log" \
      --timeout $(TIMEOUT) \
      make $(MFLAGS) -C "$(PROJECTS_DIR)/{1}" -f $(base_dir)/Makefile.project $(TASK) REDO=$(REDO)

patch-downloaded-projects:
	[ -f $(ALL_PROJECTS_PATCH) ] && $(SCRIPTS_DIR)/patch-downloaded-projects.R $(ALL_PROJECTS_PATCH) $(ALL_PROJECTS_DIR)

redo-good-compile:
	-rm $(GLOBAL_COMPILE_STATUS)
	$(MAKE) -f $(this_makefile) compile REDO=3

redo-good-implicits:
	-rm $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS)
	$(MAKE) -f $(this_makefile) implicits REDO=3

redo-good-metadata:
	-rm $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS)
	$(MAKE) -f $(this_makefile) metadata REDO=3

redo-good-semanticdb: $(bootstrap)
	-rm $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)
	$(MAKE) -f $(this_makefile) semanticdb REDO=3

redo-failed-compile:
	-rm $(GLOBAL_COMPILE_STATUS)
	$(MAKE) -f $(this_makefile) compile REDO=1

redo-failed-implicits:
	-rm $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS)
	$(MAKE) -f $(this_makefile) implicits REDO=1

redo-failed-metadata:
	-rm $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)
	$(MAKE) -f $(this_makefile) metadata REDO=1

redo-failed-semanticdb: $(bootstrap)
	-rm $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)
	$(MAKE) -f $(this_makefile) semanticdb REDO=1

redo-compile: $(bootstrap)
	-rm $(GLOBAL_COMPILE_STATUS)
	$(MAKE) -f $(this_makefile) compile REDO=2

redo-implicits:
	-rm $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS)
	$(MAKE) -f $(this_makefile) implicits REDO=2

redo-metadata:
	-rm $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)
	$(MAKE) -f $(this_makefile) metadata REDO=2

redo-semanticdb: $(bootstrap)
	-rm $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)
	$(MAKE) -f $(this_makefile) semanticdb REDO=2

repo-build-system: $(GLOBAL_REPO_BUILD_SYSTEM)

repo-metadata: $(GLOBAL_REPO_METADATA)

repo-sloc: $(GLOBAL_REPO_SLOC)

report: $(GLOBAL_COMPILE_STATUS) $(GLOBAL_METADATA_STATUS) $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE) $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS) $(GLOBAL_IMPLICITS)
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/report.Rmd", output_file=file.path("$(CURDIR)/report.html"), knit_root_dir="$(CURDIR)", params=list(base_dir="$(base_dir)", current_dir="$(CURDIR)"))'
	@echo ">> Report is in report.html"

reset: $(bootstrap)
	$(parallel) TASK=$@ PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)

reset-all: $(bootstrap)
	$(parallel) TASK=$@ PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)

sbt-structure: $(GLOBAL_SBT_STRUCTURE_STATUS)

scaladex: $(SCALADEX)

semanticdb: $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)

