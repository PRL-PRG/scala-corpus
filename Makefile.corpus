# -*- mode: makefile -*-

# the location of this makefile
base_dir := $(dir $(abspath $(shell readlink $(lastword $(MAKEFILE_LIST)))))
include $(base_dir)/Makevars

PROJECTS_DIR := projects
LOG_DIR_BASE := logs
TIMESTAMP := $(shell LC_LOCALE=C date)
LOG_DIR_LATEST := $(LOG_DIR_BASE)/latest

# it cannot be simply be ?= because that one is not immediate, but deferred so
# it will be evaluated multiple times
ifeq ($(origin LOG_DIR), undefined)
    ifeq ($(origin LOG_DIR_BASE), undefined)
		LOG_DIR := $(LOG_DIR_BASE)/1
	else
		LOG_DIR := $(LOG_DIR_BASE)/$(shell ls -1 $(LOG_DIR_BASE) | awk 'BEGIN {max = 0} /[0-9][0-9]*/ {if ($$1 > max) max=$$1} END {print max+1}' )
	endif
endif

# contains the list of projects used in the corpus
PROJECTS_FILE := projects.txt
PROJECTS_CSV_FILE := projects.csv
# a file controlling the number of parallel tasks it can be updated while the
# task is run, but gets reset before a task is run
JOBS_FILE := jobsfile.txt

# --------------------------------------------------------------------------------

# parallel exit code is based on how many jobs has failed there will for sure be
# some so we just say keep going this will run make on each package with tasks
# given in as parameters
define parallel =
@echo $(N_JOBS) > jobsfile.txt
@echo ">> Running parallel with logs in $(LOG_DIR) using $(PROJECTS_FILE)..."
cp $(PROJECTS_FILE) $(LOG_DIR)/projects.txt
touch "$(LOG_DIR)/$@"
-parallel \
  --jobs $(JOBS_FILE) \
  -a "$(PROJECTS_FILE)" \
  --files \
  --bar \
  --tagstring "$@ - {}:" \
  --result "$(PROJECTS_DIR)/{1}/$(ANALYSIS_DIR)/parallel/{2}" \
  --joblog "$(LOG_DIR)/$@-parallel.log" \
  --timeout $(TIMEOUT) \
  --shuf \
  make $(MFLAGS) -C "$(PROJECTS_DIR)/{1}" -f $(base_dir)/Makefile.project "{2}" \
  :::
endef

# there is no direct rule how to create PROJECTS_DIR this has to be done manually
# using either download-projects or link-ghtorrent-projects tasks
bootstrap := $(LOG_DIR) $(PROJECTS_DIR)

.PHONY: \
  all \
	clean \
	clean-classes \
	clean-compile \
	clean-implicits \
	clean-metadata \
	clean-sbt \
	clean-semanticdb \
	clean-classes \
	compile \
	download-projects \
	implicits \
	merge-semanticdbs \
	metadata \
	link-projects \
	report-compile \
	report-metadata \
	report-semanticdb \
	reset \
	semanticdb \
	tail-log

$(LOG_DIR):
	@mkdir -p $(LOG_DIR)
	@echo "$(TIMESTAMP)" > $(LOG_DIR)/timestamp
	@rm -f $(LOG_DIR_LATEST)
	@ln -s $(notdir $(LOG_DIR)) $(LOG_DIR_LATEST)

all: metadata compile semanticdb merge-semanticdbs

clean: $(bootstrap)
	$(parallel) $@
	-rm -f extract-implicits.log
	-rm -f implicits.bin
	-rm -f implicits-exceptions.log
	-rm -fr logs

clean-classes: $(bootstrap)
	$(parallel) $@

clean-compile: $(bootstrap)
	$(parallel) $@

clean-implicits: $(bootstrap)
	$(parallel) $@

clean-metadata: $(bootstrap)
	$(parallel) $@

clean-sbt: $(bootstrap)
	$(parallel) $@

clean-semanticdb: $(bootstrap)
	$(parallel) $@

compile: $(bootstrap)
	$(parallel) $@

download-projects: $(PROJECTS_FILE)
	-mkdir -p $(PROJECTS_DIR)
	cat $(PROJECTS_FILE) | sed 's|\(.*\)--\(.*\)|\1,\2|g' | \
        parallel -C, --bar -j4 git clone "https://github.com/{1}/{2}" $(PROJECTS_DIR)/"{1}--{2}"

extract-implicits: $(bootstrap)
	$(AMM) $(SCRIPTS_DIR)/extract-implicits.sc --source $(PROJECTS_FILE) --outputDir $(LOG_DIR_LATEST) 2>&1 | tee $(LOG_DIR_LATEST)/extract-implicits.log

link-projects: $(PROJECTS_CSV_FILE)
	-mkdir -p $(PROJECTS_DIR)
	cat $(PROJECTS_CSV_FILE) | \
      csvcut -c path,project_id | \
      csvformat -K 1 | \
      parallel -j1 --bar --colsep "," "ln -s {1} $(PROJECTS_DIR)/{2}"
	cat $(PROJECTS_CSV_FILE) | csvcut -c project_id | csvformat -K 1 > $(PROJECTS_FILE)

merge-semanticdbs: $(bootstrap)
	$(parallel) $@

metadata: $(bootstrap)
	$(parallel) $@

repo-metadata: $(bootstrap)
	$(parallel) $@

report-compile:
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/task-report.Rmd", output_file=file.path("$(CURDIR)/$(LOG_DIR_LATEST)/compile-report.html"), knit_root_dir="$(CURDIR)", params=list(taskname="compile", output_dir="$(CURDIR)/$(LOG_DIR_LATEST)"))'
	@echo ">> Report is in $(LOG_DIR_LATEST)/compile-report.html"

report-metadata:
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/task-report.Rmd", output_file=file.path("$(CURDIR)/$(LOG_DIR_LATEST)/metadata-report.html"), knit_root_dir="$(CURDIR)", params=list(taskname="metadata", output_dir="$(CURDIR)/$(LOG_DIR_LATEST)"))'
	@echo ">> Report is in $(LOG_DIR_LATEST)/metadata-report.html"

report-semanticdb:
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/task-report.Rmd", output_file=file.path("$(CURDIR)/$(LOG_DIR_LATEST)/semanticdb-report.html"), knit_root_dir="$(CURDIR)", params=list(taskname="semanticdb", output_dir="$(CURDIR)/$(LOG_DIR_LATEST)"))'
	@echo ">> Report is in $(LOG_DIR_LATEST)/semanticdb-report.html"

reset: $(bootstrap)
	$(parallel) $@

semanticdb: $(bootstrap)
	$(parallel) $@

tail-log: $(LOG_DIR_LATEST)
	tail -f $(LOG_DIR_LATEST)/parallel.log
