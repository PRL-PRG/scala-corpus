# -*- mode: makefile -*-

# the location of this makefile
base_dir := $(dir $(abspath $(shell readlink $(lastword $(MAKEFILE_LIST)))))
this_makefile := $(lastword $(MAKEFILE_LIST))

include $(base_dir)/Makevars

LOG_DIR_BASE := logs
TIMESTAMP := $(shell LC_LOCALE=C date)
LOG_DIR_LATEST := $(LOG_DIR_BASE)/latest
CORPUS := $(shell basename $$(pwd))

ifeq ($(origin LOG_DIR_BASE), undefined)
	LOG_DIR := $(LOG_DIR_BASE)/1
else
	LOG_DIR := $(LOG_DIR_BASE)/$(shell ls -1 $(LOG_DIR_BASE) | awk 'BEGIN {max = 0} /[0-9][0-9]*/ {if ($$1 > max) max=$$1} END {print max+1}' )
endif


# a file controlling the number of parallel tasks it can be updated while the
# task is run, but gets reset before a task is run
JOBS_FILE := jobsfile.txt

REDO ?= 0

# --------------------------------------------------------------------------------

parallel := $(MAKE) -f $(this_makefile) parallel

bootstrap :=

.PHONY: \
	parallel \
	clean \
	clean-compile \
	clean-dejavu \
	clean-implicits \
	clean-metadata \
	clean-projects \
	clean-repo-metadata \
	clean-sbt \
	clean-semanticdb \
	reset \
	reset-all \
	download-projects \
	patch-downloaded-projects \
	repo-metadata \
	filter-sbt-repos \
	fetch-github-info \
	scaladex \
	filter-so-repos \
	dejavu \
	filter-final-repos \
	compile \
	metadata \
	semanticdb \
	implicits \
	corpus-summary \
	export-implicits \
	report

$(LOG_DIR):
	@mkdir -p $(LOG_DIR)
	@echo "$(TIMESTAMP)" > $(LOG_DIR)/timestamp
	@rm -f $(LOG_DIR_LATEST)
	@ln -s $(notdir $(LOG_DIR)) $(LOG_DIR_LATEST)

stage1: repo-metadata filter-sbt-repos fetch-github-info filter-so-repos dejavu filter-final-repos scaladex
stage2: compile metadata semanticdb
stage3: implicits corpus-summary export-implicits report

parallel:
	-mkdir -p $(LOG_DIR)
	@echo $(N_JOBS) > jobsfile.txt
	@echo ">> Running parallel task $(TASK) (REDO=$(REDO)) with logs in $(LOG_DIR) using $(PROJECTS_FILE)..."
	cp $(PROJECTS_FILE) $(LOG_DIR)/projects.txt
	touch "$(LOG_DIR)/$(TASK)"
	-parallel \
      --jobs $(JOBS_FILE) \
      -a "$(PROJECTS_FILE)" \
      --files \
      --bar \
      --tagstring "$(TASK) - {}:" \
      --result "$(PROJECTS_DIR)/{1}/$(ANALYSIS_DIR)/parallel/$(TASK)" \
      --joblog "$(LOG_DIR)/$(TASK)-parallel.log" \
      --timeout $(TIMEOUT) \
      make $(MFLAGS) -C "$(PROJECTS_DIR)/{1}" -f $(base_dir)/Makefile.project $(TASK) REDO=$(REDO)

clean:
	-$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -fr $(LOG_DIR_BASE) $(JOBSFILE)
	-rm -f $(PROJECTS_GITHUB_INFO)
	-rm -f $(GLOBAL_REPO_METADATA)
	-rm -f $(GLOBAL_REPO_SLOC)
	-rm -fr $(SBT_PROJECTS_FILE) $(SO_PROJECTS_FILE) $(PROJECTS_DIR) $(PROJECTS_FILE)
	-rm -f $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)
	-rm -f $(GLOBAL_COMPILE_STATUS)
	-rm -f $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)
	-rm -f $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS) $(GLOBAL_IMPLICITS)
	-rm -f $(CORPUS_SUMMARY)
	-rm -f $(SCALADEX)
	-rm -f $(CORPUS_ANALYSIS_HTML) $(IMPLICIT_CALLSITES) $(IMPLICIT_DECLARATIONS)
	$(MAKE) -f $(this_makefile) clean-dejavu

clean-compile:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_COMPILE_STATUS)

clean-dejavu:
	-rm -fr $(DEJAVU_HOME) $(DEJAVU_FILES_HASH) $(DEJAVU_DUPLICATION)

clean-implicits:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_IMPLICITS_STATUS) $(GLOBAL_IMPLICITS_STATS) $(GLOBAL_IMPLICITS_EXCEPTIONS) $(GLOBAL_IMPLICITS) $(GLOBAL_IMPLICITS_INDEX_EXCEPTIONS)

clean-metadata:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_METADATA_STATUS) $(GLOBAL_METADATA_MODULES) $(GLOBAL_METADATA_SOURCEPATHS) $(GLOBAL_METADATA_DEPENDENCIES)

clean-projects:
	-rm -fr $(PROJECTS_FILE) $(PROJECTS_DIR)

clean-repo-metadata:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_REPO_METADATA) $(GLOBAL_REPO_SLOC)

clean-sbt:
	$(MAKE) -f $(this_makefile) parallel TASK=$@

clean-semanticdb:
	$(MAKE) -f $(this_makefile) parallel TASK=$@
	-rm -f $(GLOBAL_SEMANTICDB_STATUS) $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)

reset: $(bootstrap)
	$(parallel) TASK=$@ PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)

reset-all: $(bootstrap)
	$(parallel) TASK=$@ PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)

dejavu: $(SO_PROJECTS_FILE)
	-rm -fr $(DEJAVU_HOME)
	mkdir -p $(DEJAVU_HOME)
 
	-rm -fr $(DEJAVU_DOWNLOAD)
	mkdir -p $(DEJAVU_DOWNLOAD)

	parallel --bar -j1 -a $(SO_PROJECTS_FILE) ln -sfT '$$(pwd)/$(ALL_PROJECTS_DIR)/{1}' '$$(pwd)/$(DEJAVU_DOWNLOAD)/{#}'

	$(SCRIPTS_DIR)/generate-dejavu-input.R $(SO_PROJECTS_FILE) $(DEJAVU_INPUT)
	sed -i 's/"""/"/g'  $(DEJAVU_INPUT)

	cd $(DEJAVU_HOME) && \
      $(SCRIPTS_DIR)/tools/js-tokenizer/build/tokenizer Scala $(notdir $(DEJAVU_INPUT)) 1 0 .; \
      echo "Done tokenizing";

	mv $(DEJAVU_HOME)/files_0.csv $(DEJAVU_HOME)/files.csv
	mv $(DEJAVU_HOME)/stats_0.csv $(DEJAVU_HOME)/stats.csv
	mv $(DEJAVU_HOME)/summary_0.txt $(DEJAVU_HOME)/summary.txt
	mv $(DEJAVU_HOME)/projects_0.csv $(DEJAVU_HOME)/projects.csv

	cd $(SCRIPTS_DIR)/tools/sccpreprocessor/src && \
      java SccPreprocessor h2i $(CURDIR)/$(DEJAVU_HOME)

	$(SCRIPTS_DIR)/merge-dejavu-files-hash.R $(DEJAVU_FILES_HASH) $(DEJAVU_DUPLICATION)

download-projects: $(ALL_PROJECTS_FILE)
	-mkdir -p $(ALL_PROJECTS_DIR)
	-cat $(ALL_PROJECTS_FILE) | sed 's|\(.*\)--\(.*\)|\1,\2|g' | \
        parallel --timeout 30m -C, --bar -j8 $(SCRIPTS_DIR)/download-project.sh 'https://github.com/{1}/{2}' '$(ALL_PROJECTS_DIR)/{1}--{2}'
	$(MAKE) -f $(this_makefile) patch-downloaded-projects

filter-sbt-repos: $(GLOBAL_REPO_METADATA)
	$(SCRIPTS_DIR)/filter-sbt-projects.R

filter-so-repos: $(SBT_PROJECTS_FILE)
	$(SCRIPTS_DIR)/filter-so-projects.R

filter-final-repos: $(SO_PROJECTS_FILE) $(DEJAVU_DUPLICATION) $(GLOBAL_REPO_METADATA) $(PROJECTS_GITHUB_INFO)
	$(SCRIPTS_DIR)/filter-final-projects.R
	rm -fr $(PROJECTS_DIR)
	mkdir -p $(PROJECTS_DIR)
	parallel --bar -j1 -a $(PROJECTS_FILE) ln -s '../$(ALL_PROJECTS_DIR)/{1}' '$(PROJECTS_DIR)'

fetch-github-info: $(SBT_PROJECTS_FILE)
	$(SCRIPTS_DIR)/fetch-github-info.R $(SBT_PROJECTS_FILE) $(PROJECTS_GITHUB_INFO)
	cp $(PROJECTS_GITHUB_INFO) $(PROJECTS_GITHUB_INFO).pinned

patch-downloaded-projects:
	[ -f $(ALL_PROJECTS_PATCH) ] && $(SCRIPTS_DIR)/patch-downloaded-projects.R $(ALL_PROJECTS_PATCH) $(ALL_PROJECTS_DIR)

repo-metadata: $(ALL_PROJECTS_FILE) $(ALL_PROJECTS_DIR)
	$(parallel) TASK=repo-metadata PROJECTS_FILE=$(ALL_PROJECTS_FILE) PROJECTS_DIR=$(ALL_PROJECTS_DIR)
	$(SCRIPTS_DIR)/merge-csvs.R $(ALL_PROJECTS_FILE) $(ALL_PROJECTS_DIR) $(REPO_METADATA) "cciiciiii" $(GLOBAL_REPO_METADATA)
	$(SCRIPTS_DIR)/merge-csvs.R $(ALL_PROJECTS_FILE) $(ALL_PROJECTS_DIR) $(REPO_SLOC) "iciii" $(GLOBAL_REPO_SLOC)

report: $(CORPUS_SUMMARY) $(IMPLICIT_CALLSITES) $(IMPLICIT_DECLARATIONS)
	Rscript -e 'rmarkdown::render("$(SCRIPTS_DIR)/analysis/corpus-analysis.Rmd", output_file=file.path("$(CURDIR)/$(CORPUS_ANALYSIS_HTML)"), params=list(base_dir="$(CURDIR)"))'

scaladex:
	if [ -f $(SCALADEX).pinned ]; then \
      cp -f $(SCALADEX).pinned $(SCALADEX); \
    else \
      $(SCRIPTS_DIR)/scaladex.R $(SCALADEX).pinned; \
      cp -f $(SCALADEX).pinned $(SCALADEX); \
    fi

metadata: $(PROJECTS_DIR) $(PROJECTS_FILE)
ifneq ($(REDO), -1)
	$(parallel) TASK=metadata REDO=$(REDO)
endif

	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_STATUS) "ii" $(GLOBAL_METADATA_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_MODULES) "cccccccccccc" $(GLOBAL_METADATA_MODULES)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_SOURCEPATHS) "ccclciciii" $(GLOBAL_METADATA_SOURCEPATHS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(METADATA_DEPENDENCIES) "cccccccl" $(GLOBAL_METADATA_DEPENDENCIES)

compile: $(PROJECTS_DIR) $(PROJECTS_FILE)
ifneq ($(REDO), -1)
	$(parallel) TASK=compile REDO=$(REDO)
endif

	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(COMPILE_STATUS) "iii" $(GLOBAL_COMPILE_STATUS)

semanticdb: $(PROJECTS_FILE) $(PROJECTS_DIR)
ifneq ($(REDO), -1)
	$(parallel) TASK=semanticdb REDO=$(REDO)
endif

	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(SEMANTICDB_STATUS) "iii" $(GLOBAL_SEMANTICDB_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(SEMANTICDB_MERGED_STATS_FILE) "iiii" $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE)

implicits: $(PROJECTS_FILE) $(PROJECTS_DIR)
ifneq ($(REDO), -1)
	$(parallel) TASK=implicits REDO=$(REDO)
endif

	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_STATUS) "ii" $(GLOBAL_IMPLICITS_STATUS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_STATS) "cciiiiii" $(GLOBAL_IMPLICITS_STATS)
	$(SCRIPTS_DIR)/merge-csvs.R $(PROJECTS_FILE) $(PROJECTS_DIR) $(IMPLICITS_EXCEPTIONS) "cccccccc" $(GLOBAL_IMPLICITS_EXCEPTIONS)
	$(AMM) $(SCRIPTS_DIR)/merge-implicits.sc --projectFile $(PROJECTS_FILE) --projectDir $(PROJECTS_DIR)
	$(SCRIPTS_DIR)/quick-summary.R

corpus-summary: $(GLOBAL_COMPILE_STATUS) \
  $(GLOBAL_METADATA_STATUS) \
  $(GLOBAL_SEMANTICDB_STATUS) \
  $(GLOBAL_SEMANTICDB_MERGED_STATS_FILE) \
  $(GLOBAL_IMPLICITS_STATUS) \
  $(GLOBAL_IMPLICITS_STATS) \
  $(GLOBAL_IMPLICITS_EXCEPTIONS) \
  $(GLOBAL_IMPLICITS_INDEX_EXCEPTIONS) \
  $(PROJECTS_GITHUB_INFO) \
  $(GLOBAL_REPO_SLOC) \
  $(GLOBAL_REPO_METADATA) \
  $(SCALADEX)

	$(SCRIPTS_DIR)/corpus-summary.R .

export-implicits: $(GLOBAL_IMPLICITS)
	$(AMM) $(SCRIPTS_DIR)/export-implicits.sc

